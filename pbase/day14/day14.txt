day13回顧：
	模塊
	  多人合作開發

	  sys.path


	自定義模塊
		查找路徑
		1.當前路徑
		2.sys.path
		3.內建模塊

	  # imp.reload(已加載模塊名)
	  .pyc 是.py的編譯文件

模塊內的屬性
	__doc__
	__name__
	__file__

模塊的文檔字符串

模塊的 __all__列表
	from xxx import *

模塊的隱藏屬性
	以 _ 開頭的屬性為隱藏屬性
		隱藏屬性在from xxx import *時不會被導入


包
	__init__.py


包的導入用import 語句

	import 包名
	import 包名.模塊名
	...


     __init__.py 內的 __all__列表
	
	作用：
		用來紀錄此褒忠有哪些子包或模塊在用from 包 import*
	  語句導入是否被調用導入
	說明：
      __all__列表只對 from import * 語句起作用

   示例：
     code/mypack/games/__init__.py


包的相對導入
  包的相對導入是指包內模塊的相互導入

語法：
  from 相對路徑包或模塊 import 屬性或模塊名
  或
  from 相對路徑包或模塊 import *

相對路徑：
  . 代表當前目錄
  .. 代表上一級目錄
  ... 代表上二級目錄
  ....以此類推
  注意： 相對導入時不能超出包的外部
示例：
  # 見mypack/games/contra.py


 包的加載路徑：
 	同模塊的加載路徑相同
 	  1. 當前文件夾
 	  2. sys.path給出的路徑



day14筆記:
	異常 exception

什麼是錯誤
  錯誤是指由於邏輯或語法等導致一個程序無法正常執行的題

  特點：
  	有些錯誤是無法預知的

什麼是異常
  異常是程序出錯時標識的一種狀態
  當異常發生時,程序不再向下執行, 而轉去調用此函數的方待
  處理此錯誤並恢復為正常狀態

異常的作用：
  1.通知上層調用者有錯誤產生需要處理
  2.用作信號


try的用兩種語法
	try - except語句
	try - finally語句


try - except語句
	語法：
	try: 
		可能觸發異常的語句
	except 錯誤類型1 [as 變量1]
		異常處理語句1
	except 錯誤類型2 [as 變量2]
		異常處理語句2
	except (錯誤類型3, 錯誤類型4,...) [as 邊量3]:
	...
	except:
		異常處理語句other
	else:
		未發生異常時執行的語句
	finally:
		最終執行語句

作用：
	嘗試捕獲異常,將程序轉為正常狀態並繼續執行

語法說明:
	as 子句是用綁定錯誤對象的變量,可以省略不寫
	expect 子句可以有一個或多個,但是少要有一個
	else 子句最多只能有一個,也可以省略不寫
	finally 子句最多只能有一個也可以省略不寫


try - finally語句
	語法：
	  try:
	  	  可能觸發異常的語句
	  finally:
	  	  最終語句
	說明：
	  finally 子句不可以省略
	作用：
	  通常用try - finally 語句來做觸發異常時必須需要處裡的事情
	  無論異常是否發生, finally子句都會被執行
	注：
	  try - finally 語句不會改變程序的(正常/異常)狀態


問題：
	try - except 語句幹什麼用？
	請問錯誤通知是誰發出的？ 怎麼發出？


raise 語句
	作用：
		觸發一個錯誤,讓程序進入異常狀態
	語法：
		raise 異常類型
		或
		raise 異常對象
	示例見：
		11_raise.py
		12_raise.py


assert 語句（斷言語句)
	語法：
		assert 真值表達式, 數誤數據(通常是字符串)
	作用：
		當真值表達式為False時,用錯誤數據創建一個
		AssertionError 類型的錯誤,並進入異常狀態

	類似于：
		if 真值表達式 == False:
			raise AssertionError (錯誤數據)

小結：
	接受錯誤消息:
		try - expect
	必須要處裡的事情的語句：
		try - finally
	發錯誤消息的語句：
		raise 語句
		assert 語句

為什麼要用異常處裡機制：
	在程序調用需要用層數叫深時,像主調函數傳遞錯誤信息需要return語
	句層層傳遞比較麻煩,所以用異常處裡機制

說明示例：
	# 以建房子為例

	見： 14_built_house.py
	