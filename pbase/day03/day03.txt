day03筆記：

布爾運算：
運算符：
  not and or

not 運算符作用：
  邏輯取反
語法：
  not 表達式

例：
  not True  # False
  not False # True
  not 100   # False 相當於 not bool(100)
  not 0.0   # True
  not 0J    # True
  not 1+2J  # False
  not ''    # True
  not "False" #False
  not None  # True

"False"(字符串)和 False(布爾類型)

and 運算符：
作用：
  反迴優先為假值對象
語法：
  表達式1 and 表達式2

例：
  0 and 100 # 返回0
  100 and 200 # 返回200

說明：
  當表達式1的布爾測試值為True時, 返回 表達式2,
  否則返回表達式1

bool(表達式1) and bool(表達式2) 結果：
---------------------------------------
    False            False    False
    False            True     False
    True             False    False
    True             True     True   

and 真值表：
  x and y
bool(x)  返回值
True     y
False    x

or 運算符：
作用：
  優先返回真值(True)的對象
語法：
  表達式1 or 表達式2
例：
   0 o 100   返回值100
   100 or 0  返回值100
   0.0 or 0  返回  

正負號運算符：
  +(正號)   -(負號)
語法：
  + 表達式
  - 表達式
說明：
  一元運算符

位運算：
運算符：
 &   位與
 |   位或
 ^   位異或
 <<  左移
 #>> 右移

 &位與：&(and)
 語法
   表達式x & 表達式y
作用：
   按位操作，兩個對應的位都為1,則結果為1
           兩個對應的位只要有一個為0,則結果為0

bin(x)函數：
bin(x)  將x轉換為二進制(binary)的字符串

|位或
語法：
  表達式x | 表達式y
作用：
  按位操作,兩個對應的位只要有一個為1,則結果為1
  兩個對應的位都為0,則結果為0

^位與或：
語法：
  表達式x ^ 表達式y
作用：
  按位操作,兩個對應的位不同,結果為1
          兩個對應的位相同,結果為0

<<左移運算
語法格式：
  表達式x << 整數表達式y
作用：
  將x的二進制值,按位向左移動y位,低位補0
例：
  bin(x) = x
  x = 6 << 1.5

#>>右移運算
語法表達格式：
   表達式 x >> 整數表達式y
作用：
  將x的二進制,按位向右移動y位,低位溢出丟棄

例：
  6 >> 1 # 3
  6 >> 2 # 1
  6 >> 3 # 0
  6 >> 100 # 0

~ 按位求反
語法格式：
  ~ 表達式
作用：
  將數據二進制相應取反

例:
  ~ 6

練習：
  IP = 0xc0a80164      # IP:192.168.1.100
  mask = 0xFFFFFF00    # 子網   255.255.255.0
  求：IP & MASK 的值    # 網段地址
  求：IP | ~MASK 的值   # 廣播地址

hex(x)將一個整數轉為16進制的字符串

字符串 str
  作用是用來紀錄文本信息

字符串式一個有序的字符序列

如何表示一個字符串：
  在非註釋中凡是用引號括起來的部份

  '       單引號
  "       雙引號
  '''     三單引號
  """     三雙引號

空字符串的表示方法：
 ''
 ""
 ''''''
 """"""
空字符的布爾值(bool)為false.

非空字符串表示方法：
  'hello'
  "hello"
  """hello"""
  '''hello'''
單引和雙引號三引號區別：
  單引號內的雙引號不算結束符
  雙引號內的單引號不算結束符
  
  I'm a teacher
  
  I am "weimingze"
  print('I am "weimingze"')
換行符：
  \n
  1.print('hello\nworld!')
  2.print("""hello
  world!""")
  1.2相同

  三引號字符串,也叫所見即所得字符串,
     字符串的換行直接被據錄在字符串內部

隱式字符串拼街：

x = "aaaaaaaaaaaaaaaaaaaaaaaaaaa"
    "aaaaaaaaaaaaaaaaaaaaaaaaaaa"
    "aaaaaaaaaaaaaaaaaaaaaaaaaaa"
    "aaaaaaaaaaaaaaaaaaaaaaaaaaa"

s = "I'm" 'a teacher.' 'my name:"vincent"'

用轉義序列歹表特殊字符
字符串常量中用字符反斜槓 \ 
後跟一些字符代表特定含意的字符
 \' 單引號
 \" 雙引號
 \n 換行符

 字符串中反斜槓字符表
   \'
   \''
   \n         換行符
   \a         響鈴
   \\         一個反斜槓字符 \
   \r         返回光標至首行
   \f         換頁字符
   \t         水平製表符
   \v         垂直製表符
   \b         退格(backspace)
   \0         字符零
   \xXX       十六進制表示
   \000       八進制表示
   \uXXXX     Unicode16位的十六進制表示
   \uXXXXXXXX Unicode32位的十六進制表示

ASCII字符表
  $ man ascii<迴車>

中文 對應 "\u4e2d\u6587"
  Unicode
  UTF-8  (Unicode Transfrom)

ASCII編碼：

  字符      十進制      十六進制

  '0'        48        0x30
  'A'        65        0x41
  'a'        97        0x

raw字符串(原始字符串) 
  格式：
    r'C:\Windows\System3'

    'C:\\Windows\\System'
  作用：
    將字符串內的反斜槓不作為轉義字符
  示例：
    a='C:\newfile\test.ty'
    print(a)

序列相關的字符串函數：
   len(seq) 函數用於獲取字符串序列長度
            (長度是指字節數)
      len("ABCD")  #4
   max(seq) 函數用於獲取一個字符串最大值得字符
      max("Aa1Bb2")  #b
   min(seq) 函數用於獲取一個字符串最小值得字符
      min("Aa1Bb2")  #1

字符串代碼轉換函數：
    ord(s) 返回一個字符串的ASCII的值
    chr(i)   返回i這個值所對應的字符

數字轉換為字符串函數
    hex(i)  將整數轉換為十六進制字符串
    oct(i)  將整數轉換為八進制字符串
    bin(i)  將整數轉換為二進制字符串

將字符串轉換為整數
    int(x, base=0)  將字符串轉換為整數
    float
    bool
    complex

將對象轉換為字符串類型
  str(x)  x可以為任意對象

為什麼要字符串轉換？ 
  "123" + 4
  它的含意可能是：
  123+4    -> 127
  int("123") + 4  -> 127
  還可能是
  "123" + "4" -> "1234"
  "123" + str(4) -> "1234"

字符串的運算：
   +  +=  *  *=
   +  加號運算符用於拼街字符串
       例：
       a = "ABCD"
       b = "EFG"
       c = a + b # c---> "ABCDEFG"

   += 運算符用原字符串與右側字符串拼皆生成新的字符串
       例：
       a = 'ABCD'
       a += "EFG"    # a ---> "ABCDEFG"
   * 運算符生成重複字符串
      例：
      x = "ABCD" * 3
      注：
        *號右側的運算符只能是整數

   *= 運算浮生程重複字符串並改變變量的綁定
       例：
       x = 123
       x *= 4        # 等同於 x = x * 4
       print(x)
        注：
          *= 右側對想只能是整數

in / not in 運算符
  作用：
    in/not 用於序列,字典,集合中,
    用於判斷某個值是否在於對象中,
    存在-->True, 不存在-->False
  注：
    not in 與 in返回值相反

s = "welcome to tarena!"
if 'to' in s:
     print("to在字符串s中")
else:
     print("to不在字符串s中")

字符串比較：
   # >
   # >=
     <
     <=
     ==
     !=
     例：
       "ABC" > "ABB"  # True
       "ADC" < "ABC"  # False
       "ABC" >= "123" # True
       "AD"  >= "ABC" # True
       "AB"  < "ABC"  # True
       "ABC" == "abc" # False
       "ABCD" != "DCBA"   # True

Python 運算符優先級：
(由上而下,由高到低)
**           指數
~, +, -      按位反轉,一元正號,一元負號
*, /, //, %  乘....
+, -         加法減法
<<, >>       左移,右移
&            位與
^            位異
|            位或
< <= > >= == !=, is, is not, in, not in 比較等..
not          布爾非
and
or
if - else    表件表達式





