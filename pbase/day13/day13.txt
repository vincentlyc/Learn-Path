day12回顧:
裝飾器

def 裝飾器函數名(fn):
    pass


@裝飾器名
def 被裝飾函數名(參數)：
	...

# 調用
被裝飾函數名(實參列表)


函數的文檔字符串：

函數內第一個沒有賦值給變量的字符串

函數的 _doc_ 屬性
	用來綁定文檔字符串

函數的 _name_屬性
	用來綁定函數的名字



模塊 module

模塊的分類：
  內建模塊
  	builtins
  		len, max, min,...
  標準庫模塊
  	.py
  第三方模塊
  自定義的模塊

模塊的導入語句：
	import 語句
	from import 語句
	from import * 語句


dir() 函數

math 模塊
time 模塊


day13筆記：
	
系統模塊 sys
	  此模塊全部是運行系統相關的信息

	  文檔參見：
	 
	sys.modules
	sys.version
	sys.version_info #(會顯示版本所有細節元組)
	sys.argv
	sys.builtin_module_names 內建模塊名
	sys.exit([arg]) 直接結束程序
	sys.getrecursionlimit()  得到遞歸層數
	sys.setrecurionlimit(n)  得到和修改遞歸層數


自定義模塊
	示例見：
	mymod1.py             #自定義模塊
	test_mymod1.py		  #用來導入和測試字定義的主模塊


	自定義的模塊模塊名必須符合"標識符"的命名規則(同變量)

模塊有各自獨立的作用域
	示例見:
	  mymod2.py
	  mymod1.py
	  06_test_mymod.py

模塊化編成的優點：
	1.有利於多人合作開發
	2.使代碼更容易維護
	3.提高代碼的使用率
	4.有利於解決變量名的衝突


import 語句 搜索模塊的路徑順序
	1.搜索程序運行時的路徑(當前路徑)
	2.sys.path 提供的路徑
	3.搜索內置模塊

sys.path是一個存儲模塊搜索路徑的列表
	1.可以把字定義的模塊放在相應的路徑下舊可以導入
	2.可以把自己模塊的路徑添加在sys.path列表中


模塊的加載過程：
	1.在模塊導入時,模塊的所有語句會執行
	2.如果一個模塊已經以導入,再次導入時不會重新執行模塊內的語句

模塊的重新加載：
  import mymod3
  import imp
  imp.reload(mymod3)   # 重新加載 mymod3模塊


模塊導入和執行過程：
	1.先搜索相關路徑找模塊(.py)
	2.判斷是否有此模塊對應的.pyc文件,如果存在pyc文件且比
	.py文件新,則直接加載.pyc文件
	3.否則用.py文件生成.pyc后在進行加載

pyc 模塊的編譯文件
		   編譯				解釋執行
mymod1.py ----> mymod1.pyc --------> python3


模塊的屬性
	屬性的實質是變量(是模塊內的全局變量)

模塊內預置的屬性
	__doc__
	作用:
		用來綁定模塊的文檔字符串

模塊內第一個沒有賦值給任何變量的字符串為模塊的文檔字符串

	__file__屬性
		__file__綁定模塊對應的文檔路徑名
			1.對於內建模塊, 不綁定路徑(沒有_file_屬性)
			2.對於其他模塊, 綁定路徑名的字符串

	__name__屬性
		此屬性用來紀錄模塊的自身名字

	作用：
		1.紀錄模塊名
		2.與來判斷是否為主模塊
	說明：
		當此模塊為主模塊時,__name__綁定 '__main__'
		當此模塊不是主模塊時, 此屬性綁定模塊名


模塊的__all__列表
	模塊中的__all__列表是一個用來存放可導出屬性的
	字符串列表

	作用：
	  當用 from import *語句導入時,只導入__all__
	  列表內的屬性

	示例見：
	  mymod6.py


	模塊的隱藏屬性
	 	模塊中以'_'開頭的屬性,在 from import *
	 	語句導入時, 將不被導入, 通常稱這些屬性為隱藏屬性

	 	示例：
	 		mymod7.py

隨機模塊 random
  作用：
   用於模塊或生成隨機輸出的模塊


   R.uniform[a,b)  返回範圍內的隨機數
   R.randrange([start,] stop[, step])  返回range(start,stop,step) 中的隨機數
   R.choice(seq)   從序列中返回隨意元素
   R.shuffle	   隨機亂排序列

以數學查找數字：
import math
math.log(查找範圍的數,2)  # 原理：二分法

包 (模塊包) package
	包是將模塊以文件夾的組織形式進行分組管理的方法

	作用：
		將一系列模塊進行分類管理, 有利防止命名衝突
		可以在需要時加載一個或部份模塊而不是全部模塊
	包示例：
	  mypack/
	  	  _init_.py
	  	  menu.py
	  	  games/
	  	  		__intit__.py
	  	  		contra.py
	  	  		supermario.py
	  	  		tanks.py
	  	  office/
	  	  		__init__.py
	  	  		excel.py
	  	  		word.py

__init__.py 文件
  常規包內需存在的文件
  __init__.py 會在包加載時被自動調用

  	作用
  		編寫此包的內容
  		在內部填寫文檔字符串
  		在__init__.py 內可以加載此包所依賴的一些其他模塊

包的導入：
	用三條import語句可以導入包(同模塊的導入規則)

	import 包名 [as 包別名]
	import 包名.模塊名  [as 模塊新名]
	import 包名.子包名.模塊名

	from 包名 import 模塊名 [as 模塊新名]
	from 包名.子包名 import 模塊名 [as 模塊新名]
	from 包名.子包名.模塊名  import 屬性名 [as 屬性新名]

	from 包名 import *
	from 包名.模塊名 import *
	...