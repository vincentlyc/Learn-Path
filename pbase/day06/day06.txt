day06.筆記

列表　list
序列類型簡介(Sequence)
　　字符串 str
  列表　　　list
  元組　　　tuple

列表的定義：
　　　列表是由一系列特定元素組成的. 元素之間可能沒
　　　有任何關係,但他們之間有先受順序的關係.

列表可以改變各個元素的值
列表是一種容器

空列表：
    L = []  #空列表
    L =　list() #空列表

創建非空列表：
    L = [1, 2, 3, 4]
    L = ["beijing", "shanghai", "shenzhen"]
    L = [1, "two", 3.0, 'four']
    L = [1, 2, [3.1, 3.1], 4]

列表的生成函數 list()
	list() 生成一個空列表,等於[]
	list(iterable)	用可迭代對象初始化一個列表
例：
	L = list('hello')	# L --> ['h', 'e', 'l', 'l', 'o']
	S = 'tarena'
	L = list(S) #

列表的運算
　　算術的運算：
	+  +=  *  *=
+加號的運算符用於拼接列表
例：
　　x = [1,2,3]
  y = [4,5,6]
  z = x + y

+= 運算符用於原列列與右側列表拼接生成對的列表
　　x = [1,2,3]
  y = [4,5,6]
  x += y  #等同於　x = x + y

* 運算符用於生成重複的列表
　　x = [1, 2] * 3  # x = [1,2,1,2,1,2]

*= 用原列表生成重複的列表, 並改變變量1的綁定
　　x = [1,2,3]
  x *= 4 # x = [1,2,3,1,2,3....]

列表的關係(比較)運算：
　　> >= < <= == !=

例：
　　x = [1,2,3]
  y = [2,3,4]
  x != y  #True
  x == y  #False
  x > y   #False
  x < y   #True
  [1, "two"] < ["two", 1]  #錯的TypeError

列表的in / not in　運算符
　　x = [1, 'two', 3.0, "four"]
  1 in x     # True
  2 not in x # True
  "3" in x   # False
  10 in x	 # False

列表的基本操作：
索引　index 
　　　列表[索引]
等同於字符串索引：
　　　正向索引: 0 ~ len(x) -1

列表示可以變,可以通過索引賦值
例：
	x = [1,2,3,4]
	x[2] = 3.14
	print(x)
	[1, 2 3.14, 4] 

切片　slice
    [:] [::]
列表切片的規則等於字符串切片規則
例：
　　x = [1,2,3,4,5]
  y = x[1::2]  # y = [2, 4]

切片賦值：
　　切片賦值可以改變原列表的排列, 及插入刪除數據
　　列表中可以用切片改變列表對應元素的值

例：
　L = [2,3,4]
 L[0:1] = [1.1, 2.2]      # L = [1.1, 2.2, 3, 4] 
 L[2:] = [3.3, 4.4, 5.5]  # L=[...]
 L=[1.1, 2.2, 3.3, 4.4, 5.5]
 L[:] = [3,4]  # L = [3,4]

 L = [1,2,3,4,5,6]
 L[0::2] = [1.1, 3.3, 5.5]  #替換原列表中的元素
 L[0::2] = [0.1, 0.2]    #錯的

注意事項：
　　對於步長大於1的切片賦值, 可能會出現賦值錯誤問題

例：
　　L = [1,2,3,4,5,6]
  L[::2] = "ABC"   #　對的
  L[::2] = "ABCD"  # 錯的

切片賦值是改變原列表, 不會生成新列表
　　L = [1,2,3,4,5,6]
  L2 = L
  L3 = L[::2]  #[1,3,5]

python3中常用的序列函數
	len(x)	返回序列的長度
	max(x)
	min(x)
	sum(x)
	any(x)
	真值測試,如果列表其一個值為真值,則返回True
	all(x)
	真值測試,如果列表中所有值都為真值則返回True
例：
	L = [1, "two, 3.0"]
	print(len(L))
	L = [8, 3, 6, 2]
	print(max(L))    # 8
	print(min(L))    # 2

python3中列表的常用方法
見： >>> help(list)
以下L代表列表

L.index(v[,begin[,end]])  
返回對應元素的下標,begin為開始索引, end為結束索引
L.insert(index, obj)
將某個元素差放到列表中指定的位置
L.count(x) 返回列表中元素的個數
L.remove(x) 從列表中刪除第一次出現在列表中的值
L.copy()  複製此列表(只複製一層,不進行深層複製)
L.append(x) 在列表尾部添加單個元素
L.extend(lst) 向列表追加令一個列表(還是原來列表)
L.clear() 清空列表,等同於L[:] = []
L.sort(reverse = False)
將列表的順序按值的小到大順序進行排列
L.reverse()　列表反轉
L.pop([index]) 刪除索引對應的元素,如果不加索引,默認刪除最後元素,同時返回移除元素

列表嵌套：
L = [20, 21, 22]
L1 = [10, L ,30]
L2 = L1.copy()
print(L1)	#[10, [20, 21, 22], 30]
print(L2)   #[10, [20, 21, 22], 30]

複製列表：
　　　淺拷貝和深拷貝

淺拷貝　shallow copy
  L.copy()
  L[:]     # 切片複製是淺拷貝

深拷貝　deep copy
  將對象逐層複製(複製後的對象完全獨立)

import copy # 導入copy模塊
L = [20, 21, 22]
L1 = [10, L ,30]
L2 = copy.deepcopy(L1)	# 調用深拷貝函數進行複製
L[2] = 25
print(L1)	#[10, [20, 21, 25], 30]
print(L2)   #[10, [20, 21, 22], 30]

del 刪除運算符用于刪除列表元素

例：
　cities = ["北京", "上海",　"深圳", "天津"]
　#　刪除"深圳"
  cities.remove("深圳")
  cities.pop(2)
  del cities[2] #刪除列表元素


列表推導式(list comprehension)
  列表推導式是用可迭代對象, 依次生成列表內元素的方式

語法：
  [表達式　for 變量　in 可迭代對象]
  或
  [表達式　for 變量　in 可迭代對象　if 條件表達式]

例如：
#要生成如下列表
[1, 4, 9, 16, .....]
[1**2, 2**2, 3**2, 4**2, ....]

L = [x**2 for x in range(1,11)]
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

L = [x**2 for x in range(1,11,2)]
[1, 9, 25, 49, 81]

L = [x**2 for x in range(1,11) if x % 2 == 1]
[1, 9, 25, 49, 81]


列表推導式的嵌套:
語法:
  [　表達式1 for 變量1 in　可迭代對象1 (if　
  條件表達式1) 表達式2 for 變量2 in 可迭代對象2 (
  if 條件表達式2)　]

示例：
  將列表[2,3,5] 中的元素與　列表　[7, 11, 13]
  的元素分別相乘, 將得到的元素放于一個列表中
  
  L = [x*y for x in [2,3,5] for y in [7,11,13]]