day09筆記：

函數function

什麼是函數：
	函數是可重複執行的函數,可以重複使用

作用：
	定義用戶級別的函數

語法：
	def 函數名(參數列表)：
			語句塊(代碼塊)...

語法說明：
  名字是語句塊的名稱
  函數名的命名規則與變量相同(標識符)
  函數的名字是一個變量,是綁定代碼塊的名稱
  函數有自己的名字,要用函數處理外部數據需
  要用參數給函數傳入一些數據,如果不需要傳入參數
  參數列表為空
  語句塊部份不能為空,如果為空需要填充pass語句
  
函數調用：
    函數名（實際參數)
調用說明：
    1.函數調用是一個表達式
    2.如果沒有return語句,函數執行完畢完成None值對象
    3.如果函數需要返回其他的值對像需要用return語句

return語句
語法：
  retun語句[表達式]
  []代表可以省略

作用：
  結束當前函數的執行,反回到調用該函數的地方,同時返回一
個值對象的引用關係


函數的參數傳遞：
傳遞方式：
  1. 位置傳參
  2. *  序列傳參
  3. ** 關鍵字傳參

位置傳參：
  實際參的對應關係與形式參數的對應關係是以位置來依次對應的
示例：
  def sum3( a, b, c) :<--形式傳參
      pass
  #         ^, ^, ^  
  x = sum3( 1, 2, 3)  <--實際傳參

位置傳參說明：
  實際和形參能透過位置進行對應和傳遞
  實際和形參和形參的個數必須完全相同


序列傳參：
  序列的元素個數必須與列表的個數相同

示例：
  見：args.py

關鍵字傳參：
  關鍵字傳參是指傳參時,按著形參的名稱給形參賦值
  實參和形參按名稱進行批配

示例：
  見：args2.py

字典關鍵字傳參：
  實參和形參通過字典逕行傳遞和批配
例：
  d1 = {"c":33, "a":11, "b":22}
  myfun(**d1)

說明：
  字典傳參的鍵名和形參名必須一致
  鍵名必須為字符串
  鍵名要在形參中存在

見：args3.py
   myfun(100, *(200, 300))


----------------------------以下講函數的定義(創建函數)----------------------------
                           -- 以下說的是函數形參 
函數的缺省參數
  語法：
   def 函數名(形參1=默認參數1, 形參2=默認參數2,...):

例：
  def info(name, age=1, addr="不詳")：
      print("姓名", name, "年齡：", age, "住址", addr)

  # 調用時
  info("林原君", 28, "朝陽區")
  info("Tarena, 15)
  info("張飛")
  

缺省參數說明：
  1. 缺省參數必須自右至左依次存在,如果一個參數有缺省
  值,則其右測的所有參數都必須有缺省參數(缺省值)
  2. 缺省參數可以有0個或多個,甚至全部都是有缺省參數

例：
def fn(a, b=10, c): pass 這是錯的
def fn(a = 1, b, c=3) : pass 這是錯的


函數的不定長參數：
  不定長參數有兩種：
  星號元組形參
  雙星號字典形參


星號元組形參：
  語法：
    def 函數名(*元組形參名)：
        語句塊

min()/max()
示例見：
  star_args.py


命名關鍵字型參
語法：
  def 函數名(*,命名關鍵字形參名)
      語句塊
  或
  def 函數名(*args, 命名關鍵字形參名)
      語句塊

示例：
  見named_args.py


雙星號字典形參：
語法：
    def 函數名(**字典形參名)
        語句
例:
def myfun(**kwargs):
    print("參數個數：", len(kwargs))
    for k,v in kwargs.item():
        print(k, "-->", v)
        
#調用
func(name="tarena",age = 15)
func(a=1, b="BBB", c=[1,2,3], d=True)

